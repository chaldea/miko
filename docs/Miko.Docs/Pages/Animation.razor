@page "/animation"

<div @ref="_square1" class="square1"></div>

<div>
    <Miko.Button OnClick="Play1">Play</Miko.Button>
    <Miko.Button OnClick="Pause1">Pause</Miko.Button>
    <Miko.Button OnClick="Stop1">Stop</Miko.Button>
</div>
<br />
<br />
<br />
<div @ref="_square2" class="square2"></div>
<div>
    <Miko.Button OnClick="Play2">Play</Miko.Button>
    <Miko.Button OnClick="Pause2">Pause</Miko.Button>
    <Miko.Button OnClick="Stop2">Stop</Miko.Button>
</div>

<style>
    .square1 {
        width: 100px;
        height: 100px;
        background: rgba(0, 0, 255, 0.5);
    }

    .square2 {
        --background: blue;
        width: 100px;
        height: 100px;
        background: rgba(0, 0, 255, 0.5);
    }
</style>

@code {
    [Inject] public AnimationService AnimationService { get; set; }

    private ElementReference _square1;
    private ElementReference _square2;
    private IAnimation animation1;
    private IAnimation animation2;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            animation1 = await AnimationService
                .Create()
                .AddElement(_square1)
                .Duration(1500)
                .Iterations(int.MaxValue)
                .FromTo("transform", "translateX(0px)", "translateX(100px)")
                .FromTo("opacity", "1", "0.2");

            animation2 = await AnimationService
                .Create()
                .AddElement(_square2)
                .Duration(3000)
                .Iterations(int.MaxValue)
                .Keyframes(new object[]
                {
                    new { offset = (float) 0, background = "red"  },
                    new { offset = (float) 0.72, background = "var(--background)"  },
                    new { offset = (float) 1, background = "green"  },
                });
        }
    }

    public async Task Play1(MouseEventArgs args)
    {
        await animation1.Play();
    }

    public async Task Pause1(MouseEventArgs args)
    {
        await animation1.Pause();
    }

    public async Task Stop1(MouseEventArgs args)
    {
        await animation1.Stop();
    }

    public async Task Play2(MouseEventArgs args)
    {
        await animation2.Play();
    }

    public async Task Pause2(MouseEventArgs args)
    {
        await animation2.Pause();
    }

    public async Task Stop2(MouseEventArgs args)
    {
        await animation2.Stop();
    }
}
